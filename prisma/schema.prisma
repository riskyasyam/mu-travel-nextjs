// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Paket {
  id                  Int      @id @default(autoincrement())
  namaPaket           String
  fotoUrl             String   @db.Text
  deskripsi           String   @db.Text
  harga               Int
  durasi              Int      // dalam hari
  tanggalKeberangkatan DateTime
  hotelMadinah        String
  hotelMakkah         String
  pesawat             String
  ratingHotelMakkah   Int      @default(5)
  ratingHotelMadinah  Int      @default(5)
  sisaKursi           Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// ---> TAMBAHKAN MODEL-MODEL BARU INI <---
model Dokumentasi {
  id        Int      @id @default(autoincrement())
  fotoUrl   String   @db.Text
  deskripsi String?  // Deskripsi opsional
  createdAt DateTime @default(now())
}

model Testimoni {
  id                  Int      @id @default(autoincrement())
  namaJamaah          String
  deskripsiTestimoni  String   @db.Text
  fotoUrl             String   @db.Text // Ini untuk screenshot WA
  createdAt           DateTime @default(now())
}

// Model BARU untuk Pengguna
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?  // <-- Kita simpan password yang sudah di-hash
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// Model-model ini dibutuhkan oleh NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}